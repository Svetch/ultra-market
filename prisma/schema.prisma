datasource db {
  provider  = "postgres"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling 
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection 
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

model User {
  id           Int           @id @default(autoincrement())
  Order        Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Organization Organization?
}

model Organization {
  id        Int        @id @default(autoincrement())
  items     ShopItem[]
  owner     User       @relation(fields: [ownerId], references: [id])
  ownerId   Int        @unique
  logo      String
  name      String
  vat       String
  address   String
  phone     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ShopItem {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  name           String
  description    String
  price          Int
  images         String[]
  categories     Category[]
  Order          Order?       @relation(fields: [orderId], references: [id])
  orderId        Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  ShopItem   ShopItem[]
  shopItemId Int?
}

model Order {
  id          Int         @id @default(autoincrement())
  items       ShopItem[]
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  payment     Payment?
  paymentId   Int         @unique
  orderStatus OrderStatus
  invoice     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Payment {
  id      Int           @id @default(autoincrement())
  order   Order         @relation(fields: [orderId], references: [id])
  orderId Int           @unique
  status  PaymentStatus

  // Stripe shipping details 
  name    String
  address String
  zip     String
  city    String
  country String
  phone   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  IngProgress
  Done
  Canceled
}

enum OrderStatus {
  Pending
  Packiging
  Shipping
  Delivered
  Canceled
}
